import React, { useState, useEffect, useRef } from "react";
import "./ConfirmBox.css";
import { TiInfoOutline, TiWarningOutline } from "react-icons/ti";
import { GrStatusGood, GrCircleQuestion } from "react-icons/gr";
import { motion, AnimatePresence } from "framer-motion";
import { animation } from "./helper";
function ConfirmBox(props) {
    const { confirm, title, options } = props;
    const anime = animation(options.animation ? options.animation : "scale");
    const getInitialColor = (type) => {
        if (options.color) {
            return options.color;
        }
        else {
            switch (type) {
                case "question":
                    return "rgb(34 211 238)";
                case "warning":
                    return "#f00";
                case "success":
                    return "rgb(74 222 128)";
                default:
                    return "rgb(96 165 250)";
            }
        }
    };
    const [iconColor, setIconColor] = useState(getInitialColor(options.type ? options.type : ""));
    const getInitialIcon = (type) => {
        if (options.icon) {
            return options.icon;
        }
        else {
            switch (type) {
                case "question":
                    return React.createElement(GrCircleQuestion, null);
                case "warning":
                    return React.createElement(TiWarningOutline, null);
                case "success":
                    return React.createElement(GrStatusGood, null);
                default:
                    return React.createElement(TiInfoOutline, null);
            }
        }
    };
    const [icon, setIcon] = useState(getInitialIcon(options.type ? options.type : ""));
    const handleMouseOver = (e) => {
        e.target.style.backgroundColor = options.hoverColor
            ? options.hoverColor
            : "rgb(28 25 23)";
        e.target.style.color = options.hoverTextColor
            ? options.hoverTextColor
            : "white";
    };
    const handleConfirmOut = (e) => {
        e.target.style.backgroundColor = options.confirmColor
            ? options.confirmColor
            : iconColor;
        e.target.style.color = options.confirmTextColor
            ? options.confirmTextColor
            : "white";
    };
    const handleCancelOut = (e) => {
        e.target.style.backgroundColor = options.cancelColor
            ? options.cancelColor
            : "rgb(229 231 235)";
        e.target.style.color = options.cancelTextColor
            ? options.cancelTextColor
            : "black";
    };
    const confirmRef = useRef(null);
    const cancelRef = useRef(null);
    useEffect(() => {
        var _a;
        (_a = confirmRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, []);
    const handleKey = (e) => {
        var _a, _b;
        if (e.keyCode === 38)
            (_a = confirmRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        else if (e.keyCode === 40)
            (_b = cancelRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    };
    const [clicked, setClicked] = useState(true);
    function result(e) {
        setClicked(false);
        setTimeout(() => {
            confirm(e);
        }, anime.time);
    }
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { onClick: () => {
                if (!options.disableBlur)
                    result(false);
            }, className: "backGround", style: {
                backgroundColor: options.hideBackground
                    ? "none"
                    : "rgba(0, 0, 0, 0.5)",
            } }),
        React.createElement(AnimatePresence, null,
            React.createElement(motion.div, { variants: anime, initial: "hidden", animate: clicked ? "visible" : "hidden", className: "box", style: {
                    filter: options.hideShadow
                        ? "none"
                        : "drop-shadow(0 25px 25px rgb(0 0 0 / 0.15))",
                } },
                React.createElement("div", { className: "boxContainer" },
                    React.createElement("div", { className: "icon", style: {
                            backgroundColor: options.iconColor
                                ? options.iconColor
                                : iconColor,
                        } }, icon),
                    React.createElement("div", { className: "title" }, title),
                    React.createElement("div", { className: "description" }, options.description ? options.description : ""),
                    React.createElement("button", { onClick: () => result(true), className: "btn action", style: {
                            backgroundColor: options.confirmColor
                                ? options.confirmColor
                                : iconColor,
                            color: options.confirmTextColor
                                ? options.confirmTextColor
                                : "white",
                        }, onMouseOver: handleMouseOver, onMouseOut: handleConfirmOut, ref: confirmRef, onKeyDown: handleKey }, options.confirmLabel ? options.confirmLabel : "Confirm"),
                    !options.hideCancel && (React.createElement("button", { onClick: () => result(false), className: "btn cancel", style: {
                            backgroundColor: options.cancelColor
                                ? options.cancelColor
                                : "rgb(229 231 235)",
                            color: options.cancelTextColor
                                ? options.cancelTextColor
                                : "black",
                        }, onMouseOver: handleMouseOver, onMouseOut: handleCancelOut, ref: cancelRef, onKeyDown: handleKey }, options.cancelLabel ? options.cancelLabel : "Cancel")))))));
}
export default ConfirmBox;
